use criterion::{black_box, criterion_group, criterion_main, Criterion};
use hex::{decode, encode};

#[inline]
fn decode_hex_str_stacks(input: &str) -> Vec<u8> {
    hex_bytes(input).unwrap()
}

#[inline]
fn encode_hex_str_stacks() -> String {
    hex::encode(&[
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        0x04,
        0x00,
        0xa4,
        0x68,
        0xe7,
        0x2d,
        0xf6,
        0x75,
        0x43,
        0x87,
        0x20,
        0x98,
        0x27,
        0x32,
        0x7b,
        0x98,
        0x9f,
        0x4a,
        0x99,
        0x54,
        0x2a,
        0x69,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x77,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0xb4,
        0x00,
        0x01,
        0x23,
        0x1c,
        0x21,
        0x39,
        0x49,
        0x45,
        0x53,
        0x17,
        0xd1,
        0x5f,
        0xf2,
        0x5d,
        0xfd,
        0x7a,
        0xd9,
        0xbc,
        0x04,
        0x26,
        0xcf,
        0xfa,
        0x5c,
        0x6f,
        0x5b,
        0xe4,
        0x6e,
        0x79,
        0xfa,
        0x1e,
        0x18,
        0x2b,
        0x61,
        0x45,
        0x18,
        0x0c,
        0x1c,
        0x13,
        0x5d,
        0x6c,
        0xcc,
        0xfc,
        0xc4,
        0x9e,
        0x85,
        0xcb,
        0x82,
        0x5e,
        0x61,
        0x52,
        0x28,
        0xda,
        0xf2,
        0xd1,
        0x66,
        0x3e,
        0x49,
        0xd7,
        0x0c,
        0xd5,
        0xd0,
        0xe1,
        0x96,
        0xd1,
        0x26,
        0xc0,
        0x03,
        0x02,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x05,
        0x16,
        0x7b,
        0x2d,
        0xd1,
        0xf0,
        0xd4,
        0x7f,
        0x59,
        0x67,
        0x21,
        0xc2,
        0x33,
        0xfd,
        0x9b,
        0x2e,
        0x99,
        0x19,
        0xac,
        0x91,
        0x28,
        0x8a,
        0x00,
        0x00,
        0x00,
        0x00,
        0x0c,
        0x1b,
        0x5e,
        0x48,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00
 ])
}


#[inline]
fn decode_hex_str_crate(input: &str) -> Vec<u8> {
    decode(input).unwrap()
}

#[inline]
fn encode_hex_str_crate() -> String {
    encode(&[
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        0x04,
        0x00,
        0xa4,
        0x68,
        0xe7,
        0x2d,
        0xf6,
        0x75,
        0x43,
        0x87,
        0x20,
        0x98,
        0x27,
        0x32,
        0x7b,
        0x98,
        0x9f,
        0x4a,
        0x99,
        0x54,
        0x2a,
        0x69,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x77,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0xb4,
        0x00,
        0x01,
        0x23,
        0x1c,
        0x21,
        0x39,
        0x49,
        0x45,
        0x53,
        0x17,
        0xd1,
        0x5f,
        0xf2,
        0x5d,
        0xfd,
        0x7a,
        0xd9,
        0xbc,
        0x04,
        0x26,
        0xcf,
        0xfa,
        0x5c,
        0x6f,
        0x5b,
        0xe4,
        0x6e,
        0x79,
        0xfa,
        0x1e,
        0x18,
        0x2b,
        0x61,
        0x45,
        0x18,
        0x0c,
        0x1c,
        0x13,
        0x5d,
        0x6c,
        0xcc,
        0xfc,
        0xc4,
        0x9e,
        0x85,
        0xcb,
        0x82,
        0x5e,
        0x61,
        0x52,
        0x28,
        0xda,
        0xf2,
        0xd1,
        0x66,
        0x3e,
        0x49,
        0xd7,
        0x0c,
        0xd5,
        0xd0,
        0xe1,
        0x96,
        0xd1,
        0x26,
        0xc0,
        0x03,
        0x02,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x05,
        0x16,
        0x7b,
        0x2d,
        0xd1,
        0xf0,
        0xd4,
        0x7f,
        0x59,
        0x67,
        0x21,
        0xc2,
        0x33,
        0xfd,
        0x9b,
        0x2e,
        0x99,
        0x19,
        0xac,
        0x91,
        0x28,
        0x8a,
        0x00,
        0x00,
        0x00,
        0x00,
        0x0c,
        0x1b,
        0x5e,
        0x48,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00
 ])
}


pub fn criterion_benchmark(c: &mut Criterion) {
    c.bench_function("decode_hex_str ('hex_bytes' from stacks) <360>", |b| b.iter(|| decode_hex_str_stacks(black_box("00000000010400a468e72df6754387209827327b989f4a99542a69000000000000007700000000000000b40001231c213949455317d15ff25dfd7ad9bc0426cffa5c6f5be46e79fa1e182b6145180c1c135d6cccfcc49e85cb825e615228daf2d1663e49d70cd5d0e196d126c00302000000000005167b2dd1f0d47f596721c233fd9b2e9919ac91288a000000000c1b5e4800000000000000000000000000000000000000000000000000000000000000000000"))));
    c.bench_function("decode_hex_str (function from crate 'hex')  <360>", |b| b.iter(|| decode_hex_str_crate(black_box("00000000010400a468e72df6754387209827327b989f4a99542a69000000000000007700000000000000b40001231c213949455317d15ff25dfd7ad9bc0426cffa5c6f5be46e79fa1e182b6145180c1c135d6cccfcc49e85cb825e615228daf2d1663e49d70cd5d0e196d126c00302000000000005167b2dd1f0d47f596721c233fd9b2e9919ac91288a000000000c1b5e4800000000000000000000000000000000000000000000000000000000000000000000"))));

    c.bench_function("encode_to_hex_str ('to_hex' from stacks) <360>", |b| b.iter(|| encode_hex_str_stacks()));
    c.bench_function("encode_to_hex_str (function from crate 'hex')  <360>", |b| b.iter(|| encode_hex_str_crate()));
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
